rsTable <- bind_cols(
solvedIns,
solveTime,
preTime,
optfasterNum,
optfasterMean,
optfasterMedian,
optslowerNum,
optslowerMean,
optslowerMedian,
nCall,
nApplied,
red
)
rsTable <- rsTable %>% setNames(nm = c('solvedIns','solveTime','preTime','optfasterNum','up mean(%)', 'up median(%)','optslowerNum','down mean(%)','down median(%)','nCall','nApplied(%)','red%'))
rownames(rsTable)<-c('roundingSat')
t <- t %>% bind_rows(rsTable)
t
analysis <- function(a,b,name,redType){
paramB <- b %>% filter(status=='*') %>% setNames(nm = c("status", "file", "ncalls", "succe", "tsx", "tsxapp", "time", "variables", "constraints"))
appliedB <- paramB %>% filter(as.double(tsxapp)!=0) %>% pull(file)
b <- b %>% filter(status!='*')
timeoutA <- a %>% filter(sol=='timeout')
timeoutB <- b %>% filter(sol=='timeout')
solvedA <- a %>% filter(sol!='timeout')
solvedB <- b %>% filter(sol!='timeout')
commonFile <- intersect(solvedA %>% pull(file), solvedB %>% pull(file))
bothSolvedA <- solvedA %>% filter(file%in%commonFile & file%in%appliedB) # where tech applied
bothSolvedB <- solvedB %>% filter(file%in%commonFile & file%in%appliedB) # where tech applied
extraSlower <- solvedA %>% filter(file%!in%solvedB$file)
extraFaster <- solvedB %>% filter(file%!in%solvedA$file)
print(bothSolvedA)
print(bothSolvedB)
speedTable <- bind_rows(bothSolvedA, bothSolvedB) %>%
group_by(file) %>%
arrange(desc(status), by_group = TRUE) %>%
summarise(
diff = as.double(first(rsTime) - last(rsTime)), # diff>0 faster
diffRatio = 100 * abs(as.double(first(rsTime) - last(rsTime))) / as.double(first(rsTime))
)
# print(bothSolvedA)
# print(bothSolvedB)
# print(solvedB)
# print(speedTable %>% filter(diff<0))
print(extraFaster)
#correct
correct_ans <-
all(bothSolvedA %>% pull(sol) == bothSolvedB %>% pull(sol)) &&
all(bothSolvedA %>% filter(sol == "1") %>% pull(obj)
== bothSolvedB %>% filter(sol == "1") %>% pull(obj))
#time
solvedIns<- solvedB %>% summarise(solvedIns=n())
solveTime<- solvedB %>% summarise(solveTime=mean(as.double(rsTime)))
preTime<- solvedB %>% summarise(preTime=mean(as.double(preTime)))
#faster
optfasterNum<- speedTable %>% filter(diff>0.0) %>%summarise(optfasterNum = n()+nrow(extraFaster))
optfasterMean<- speedTable %>% filter(diff>0.0) %>%summarise('up mean(%)'=mean(diffRatio))
optfasterMedian<- speedTable %>% filter(diff>0.0) %>%summarise('up median(%)'=median(diffRatio))
#slower
optslowerNum<- speedTable %>% filter(diff<0.0) %>%summarise(optslowerNum = n()+nrow(extraSlower))
optslowerMean<- speedTable %>% filter(diff<0.0) %>%summarise('down mean(%)'=mean(diffRatio))
optslowerMedian<- speedTable %>% filter(diff<0.0) %>%summarise('down median(%)'=median(diffRatio))
#param
nCall<- paramB %>% filter(ncalls!=0) %>% summarise(nCall=mean(as.double(ncalls)))
nApplied <- paramB %>% filter(ncalls!=0) %>%summarise('nApplied(%)'=100*sum(tsx!=0)/n())
nred <- paramB %>% filter(tsx != 0) %>% mutate(red = (tsx * tsxapp / 100) / variables) %>% summarise("red%" = mean(red) * 100)
mred <- paramB %>% filter(tsx != 0) %>% mutate(red = (tsx * tsxapp / 100) / constraints) %>% summarise("red%" = mean(red) * 100)
#summarise
table <- data.frame(row.names = name)
table <- table %>% bind_cols(
solvedIns,
solveTime,
preTime,
optfasterNum,
optfasterMean,
optfasterMedian,
optslowerNum,
optslowerMean,
optslowerMedian,
nCall,
nApplied,
if(!redType){nred}else{mred}
)
table
}
CoeffStrengthen <- read.csv("onlyCoeffStrengthen.csv", header = TRUE)
res <- analysis(rs,CoeffStrengthen,'CoeffStrengthen',0)
t<- t %>% bind_rows(res)
t
ColSingleton <- read.csv("onlyColSingleton.csv", header = TRUE)
res <- analysis(rs,ColSingleton,'ColSingleton',0)
t<- t %>% bind_rows(res)
t
default <- read.csv("default.csv", header = TRUE)
default <- default %>% filter(abs(totTime-0.0)>1e-6)
#default %>% filter(status=='*'&totTime>50) %>% View()
res <- analysis(rs,default,'default',0)
t<- t %>% bind_rows(res)
t
Doubletoneq <- read.csv("onlyDoubletoneq.csv", header = TRUE)
res <- analysis(rs,Doubletoneq,'Doubletoneq',0)
t<- t %>% bind_rows(res)
t
DualFix <- read.csv("onlyDualFix.csv", header = TRUE)
res <- analysis(rs,DualFix,'DualFix',0)
t<- t %>% bind_rows(res)
t
ParallelRow <- read.csv("onlyParallelRow.csv", header = TRUE)
res <- analysis(rs,ParallelRow,'ParallelRow',1)
t<- t %>% bind_rows(res)
t
Probing <- read.csv("onlyProbing.csv", header = TRUE)
res <- analysis(rs,Probing,'Probing',0)
t<- t %>% bind_rows(res)
t
Propagation <- read.csv("onlyPropagation.csv", header = TRUE)
res <- analysis(rs,Propagation,'Propagation',0)
t<- t %>% bind_rows(res)
t
PureLit <- read.csv("onlyPureLit.csv", header = TRUE)
res <- analysis(rs,PureLit,'PureLit',0)
t<- t %>% bind_rows(res)
t
SimpleProbing <- read.csv("onlySimpleProbing.csv", header = TRUE)
res <- analysis(rs,SimpleProbing,'SimpleProbing',0)
t<- t %>% bind_rows(res)
t
SimplifyIneq <- read.csv("onlySimplifyIneq.csv", header = TRUE)
res <- analysis(rs,SimplifyIneq,'SimplifyIneq',1)
t<- t %>% bind_rows(res)
t
Sparsify <- read.csv("onlySparsify.csv", header = TRUE)
res <- analysis(rs,Sparsify,'Sparsify',0)
t<- t %>% bind_rows(res)
t
Stuffing <- read.csv("onlyStuffing.csv", header = TRUE)
res <- analysis(rs,Stuffing,'Stuffing',0)
t<- t %>% bind_rows(res)
t
hbr <- read.csv("onlyhbr.csv", header = TRUE)
res <- analysis(rs,hbr,'HBR',1)
t<- t %>% bind_rows(res)
t
defaultPaPILO <- read.csv("offMIP.csv", header = TRUE)
res <- analysis(rs,defaultPaPILO,'defaultPaPILO',1)
t<- t %>% bind_rows(res)
t
all <- read.csv("all.csv", header = TRUE)
all <- all %>% filter(abs(totTime)>1e-6)
res <- analysis(rs,all,'all',1)
t<- t %>% bind_rows(res)
t
t<-t %>% arrange(desc(solvedIns)) %>% View()
write.csv(t,"dec.csv",row.names = TRUE)
View(t)
library(dplyr)
library(tidyr)
library(ggplot2)
library(xtable)
library(gsubfn)
library(fmtr)
library(ggthemes)
theme_set(theme_light())
'%!in%' <- function(x,y)!('%in%'(x,y))
options(scipen = 999)
options(digits = 4, nsmall = 3)
t <- data.frame()
rs <- read.csv("roundingSat.csv", header = TRUE)
solvedIns <- rs %>% filter(sol!='timeout') %>% summarise(solvedIns = n())
solveTime <- rs %>% filter(sol!='timeout') %>% summarise(solveTime=mean(rsTime))
preTime <- data.frame(NA)
decfasterNum <- data.frame(NA)
decfasterMean<- data.frame(NA)
decfasterMedian<- data.frame(NA)
decslowerNum<- data.frame(NA)
decslowerMean<- data.frame(NA)
decslowerMedian<- data.frame(NA)
nCall<- data.frame(NA)
nApplied<- data.frame(NA)
red<- data.frame(NA)
rsTable <- data.frame(row.names = 'roundingSat')
#print(rsTable)
rsTable <- bind_cols(
solvedIns,
solveTime,
preTime,
decfasterNum,
decfasterMean,
decfasterMedian,
decslowerNum,
decslowerMean,
decslowerMedian,
nCall,
nApplied,
red
)
rsTable <- rsTable %>% setNames(nm = c('solvedIns','solveTime','preTime','decfasterNum','up mean(%)', 'up median(%)','decslowerNum','down mean(%)','down median(%)','nCall','nApplied(%)','red%'))
rownames(rsTable)<-c('roundingSat')
t <- t %>% bind_rows(rsTable)
t
analysis <- function(a,b,name,redType){
paramB <- b %>% filter(status=='*') %>% setNames(nm = c("status", "file", "ncalls", "succe", "tsx", "tsxapp", "time", "variables", "constraints"))
appliedB <- paramB %>% filter(as.double(tsxapp)!=0) %>% pull(file)
unique(appliedB)
b <- b %>% filter(status!='*')
timeoutA <- a %>% filter(sol=='timeout')
timeoutB <- b %>% filter(sol=='timeout')
solvedA <- a %>% filter(sol!='timeout')
solvedB <- b %>% filter(sol!='timeout')
commonFile <- intersect(solvedA %>% pull(file), solvedB %>% pull(file))
bothSolvedA <- solvedA %>% filter(file%in%commonFile & file%in%appliedB) # where tech applied
bothSolvedB <- solvedB %>% filter(file%in%commonFile & file%in%appliedB) # where tech applied
extraSlower <- solvedA %>% filter(file%!in%solvedB$file)
extraFaster <- solvedB %>% filter(file%!in%solvedA$file)
speedTable <- bind_rows(bothSolvedA, bothSolvedB) %>%
group_by(file) %>%
arrange(desc(status), by_group = TRUE) %>%
summarise(
diff = as.double(first(rsTime) - last(rsTime)), # diff>0 faster
diffRatio = 100 * abs(as.double(first(rsTime) - last(rsTime))) / as.double(first(rsTime))
)
# print(bothSolvedA)
# print(bothSolvedB)
# print(solvedB)
# print(speedTable %>% filter(diff<0))
print(extraSlower)
print(extraFaster)
#correct
correct_ans <-
all(bothSolvedA %>% pull(sol) == bothSolvedB %>% pull(sol)) &&
all(bothSolvedA %>% filter(sol == "1") %>% pull(obj)
== bothSolvedB %>% filter(sol == "1") %>% pull(obj))
print(correct_ans)
#time
solvedIns<- solvedB %>% summarise(solvedIns=n())
solveTime<- solvedB %>% summarise(solveTime=mean(as.double(rsTime)))
preTime<- solvedB %>% summarise(preTime=mean(as.double(preTime)))
#faster
decfasterNum<- speedTable %>% filter(diff>0.0) %>%summarise(decfasterNum = n()+nrow(extraFaster))
decfasterMean<- speedTable %>% filter(diff>0.0) %>%summarise('up mean(%)'=mean(diffRatio))
decfasterMedian<- speedTable %>% filter(diff>0.0) %>%summarise('up median(%)'=median(diffRatio))
#slower
decslowerNum<- speedTable %>% filter(diff<0.0) %>%summarise(decslowerNum = n()+nrow(extraSlower))
decslowerMean<- speedTable %>% filter(diff<0.0) %>%summarise('down mean(%)'=mean(diffRatio))
decslowerMedian<- speedTable %>% filter(diff<0.0) %>%summarise('down median(%)'=median(diffRatio))
#param
nCall<- paramB %>% filter(ncalls!=0) %>% summarise(nCall=mean(as.double(ncalls)))
nApplied <- paramB %>% filter(ncalls!=0) %>%summarise('nApplied(%)'=100*sum(tsx!=0)/n())
nred <- paramB %>% filter(tsx != 0) %>% mutate(red = (tsx * tsxapp / 100) / variables) %>% summarise("red%" = mean(red) * 100)
mred <- paramB %>% filter(tsx != 0) %>% mutate(red = (tsx * tsxapp / 100) / constraints) %>% summarise("red%" = mean(red) * 100)
#summarise
table <- data.frame(row.names = name)
table <- table %>% bind_cols(
solvedIns,
solveTime,
preTime,
decfasterNum,
decfasterMean,
decfasterMedian,
decslowerNum,
decslowerMean,
decslowerMedian,
nCall,
nApplied,
if(!redType){nred}else{mred}
)
table
}
CoeffStrengthen <- read.csv("onlyCoeffStrengthen.csv", header = TRUE)
res <- analysis(rs,CoeffStrengthen,'CoeffStrengthen',0)
t<- t %>% bind_rows(res)
t
ColSingleton <- read.csv("onlyColSingleton.csv", header = TRUE)
res <- analysis(rs,ColSingleton,'ColSingleton',0)
t<- t %>% bind_rows(res)
t
Doubletoneq <- read.csv("onlyDoubletoneq.csv", header = TRUE)
res <- analysis(rs,Doubletoneq,'Doubletoneq',0)
t<- t %>% bind_rows(res)
t
DualFix <- read.csv("onlyDualFix.csv", header = TRUE)
res <- analysis(rs,DualFix,'DualFix',0)
t<- t %>% bind_rows(res)
t
ParallelRow <- read.csv("onlyParallelRow.csv", header = TRUE)
res <- analysis(rs,ParallelRow,'ParallelRow',1)
t<- t %>% bind_rows(res)
t
Probing <- read.csv("onlyProbing.csv", header = TRUE)
res <- analysis(rs,Probing,'Probing',0)
t<- t %>% bind_rows(res)
t
Propagation <- read.csv("onlyPropagation.csv", header = TRUE)
res <- analysis(rs,Propagation,'Propagation',0)
t<- t %>% bind_rows(res)
t
PureLit <- read.csv("onlyPureLit.csv", header = TRUE)
res <- analysis(rs,PureLit,'PureLit',0)
t<- t %>% bind_rows(res)
t
SimpleProbing <- read.csv("onlySimpleProbing.csv", header = TRUE)
res <- analysis(rs,SimpleProbing,'SimpleProbing',0)
t<- t %>% bind_rows(res)
t
SimplifyIneq <- read.csv("onlySimplifyIneq.csv", header = TRUE)
res <- analysis(rs,SimplifyIneq,'SimplifyIneq',1)
t<- t %>% bind_rows(res)
t
Sparsify <- read.csv("onlySparsify.csv", header = TRUE)
res <- analysis(rs,Sparsify,'Sparsify',0)
t<- t %>% bind_rows(res)
t
Stuffing <- read.csv("onlyStuffing.csv", header = TRUE)
res <- analysis(rs,Stuffing,'Stuffing',0)
t<- t %>% bind_rows(res)
t
hbr <- read.csv("onlyhbr.csv", header = TRUE)
res <- analysis(rs,hbr,'HBR',1)
t<- t %>% bind_rows(res)
t
defaultPaPILO <- read.csv("offMIP.csv", header = TRUE)
res <- analysis(rs,defaultPaPILO,'defaultPaPILO',1)
t<- t %>% bind_rows(res)
t
all <- read.csv("all.csv", header = TRUE)
all <- all %>% filter(abs(totTime)>1e-6)
res <- analysis(rs,all,'all',1)
t<- t %>% bind_rows(res)
t
library(dplyr)
library(tidyr)
library(ggplot2)
library(xtable)
library(gsubfn)
library(fmtr)
library(ggthemes)
theme_set(theme_light())
'%!in%' <- function(x,y)!('%in%'(x,y))
options(scipen = 999)
options(digits = 4, nsmall = 3)
t <- data.frame()
rs <- read.csv("roundingSat.csv", header = TRUE)
rs$obj<-ifelse(rs$obj=='-',as.double(0),as.double(rs$obj))
solvedIns <- rs %>% filter(sol!='timeout') %>% summarise(solvedIns = n())
solveTime <- rs %>% filter(sol!='timeout') %>% summarise(solveTime=mean(rsTime))
preTime <- data.frame(NA)
optfasterNum <- data.frame(NA)
optfasterMean<- data.frame(NA)
optfasterMedian<- data.frame(NA)
optslowerNum<- data.frame(NA)
optslowerMean<- data.frame(NA)
optslowerMedian<- data.frame(NA)
nCall<- data.frame(NA)
nApplied<- data.frame(NA)
red<- data.frame(NA)
rsTable <- data.frame(row.names = 'roundingSat')
print(rsTable)
rsTable <- bind_cols(
solvedIns,
solveTime,
preTime,
optfasterNum,
optfasterMean,
optfasterMedian,
optslowerNum,
optslowerMean,
optslowerMedian,
nCall,
nApplied,
red
)
rsTable <- rsTable %>% setNames(nm = c('solvedIns','solveTime','preTime','optfasterNum','up mean(%)', 'up median(%)','optslowerNum','down mean(%)','down median(%)','nCall','nApplied(%)','red%'))
rownames(rsTable)<-c('roundingSat')
t <- t %>% bind_rows(rsTable)
t
analysis <- function(a,b,name,redType){
paramB <- b %>% filter(status=='*') %>% setNames(nm = c("status", "file", "ncalls", "succe", "tsx", "tsxapp", "time", "variables", "constraints"))
appliedB <- paramB %>% filter(as.double(tsxapp)!=0) %>% pull(file)
b <- b %>% filter(status!='*')
timeoutA <- a %>% filter(sol=='timeout')
timeoutB <- b %>% filter(sol=='timeout')
solvedA <- a %>% filter(sol!='timeout')
solvedB <- b %>% filter(sol!='timeout')
commonFile <- intersect(solvedA %>% pull(file), solvedB %>% pull(file))
bothSolvedA <- solvedA %>% filter(file%in%commonFile & file%in%appliedB) # where tech applied
bothSolvedB <- solvedB %>% filter(file%in%commonFile & file%in%appliedB) # where tech applied
extraSlower <- solvedA %>% filter(file%!in%solvedB$file)
extraFaster <- solvedB %>% filter(file%!in%solvedA$file)
print(bothSolvedA)
print(bothSolvedB)
speedTable <- bind_rows(bothSolvedA, bothSolvedB) %>%
group_by(file) %>%
arrange(desc(status), by_group = TRUE) %>%
summarise(
diff = as.double(first(rsTime) - last(rsTime)), # diff>0 faster
diffRatio = 100 * abs(as.double(first(rsTime) - last(rsTime))) / as.double(first(rsTime))
)
# print(bothSolvedA)
# print(bothSolvedB)
# print(solvedB)
# print(speedTable %>% filter(diff<0))
print(extraFaster)
#correct
correct_ans <-
all(bothSolvedA %>% pull(sol) == bothSolvedB %>% pull(sol)) &&
all(bothSolvedA %>% filter(sol == "1") %>% pull(obj)
== bothSolvedB %>% filter(sol == "1") %>% pull(obj))
#time
solvedIns<- solvedB %>% summarise(solvedIns=n())
solveTime<- solvedB %>% summarise(solveTime=mean(as.double(rsTime)))
preTime<- solvedB %>% summarise(preTime=mean(as.double(preTime)))
#faster
optfasterNum<- speedTable %>% filter(diff>0.0) %>%summarise(optfasterNum = n()+nrow(extraFaster))
optfasterMean<- speedTable %>% filter(diff>0.0) %>%summarise('up mean(%)'=mean(diffRatio))
optfasterMedian<- speedTable %>% filter(diff>0.0) %>%summarise('up median(%)'=median(diffRatio))
#slower
optslowerNum<- speedTable %>% filter(diff<0.0) %>%summarise(optslowerNum = n()+nrow(extraSlower))
optslowerMean<- speedTable %>% filter(diff<0.0) %>%summarise('down mean(%)'=mean(diffRatio))
optslowerMedian<- speedTable %>% filter(diff<0.0) %>%summarise('down median(%)'=median(diffRatio))
#param
nCall<- paramB %>% filter(ncalls!=0) %>% summarise(nCall=mean(as.double(ncalls)))
nApplied <- paramB %>% filter(ncalls!=0) %>%summarise('nApplied(%)'=100*sum(tsx!=0)/n())
nred <- paramB %>% filter(tsx != 0) %>% mutate(red = (tsx * tsxapp / 100) / variables) %>% summarise("red%" = mean(red) * 100)
mred <- paramB %>% filter(tsx != 0) %>% mutate(red = (tsx * tsxapp / 100) / constraints) %>% summarise("red%" = mean(red) * 100)
#summarise
table <- data.frame(row.names = name)
table <- table %>% bind_cols(
solvedIns,
solveTime,
preTime,
optfasterNum,
optfasterMean,
optfasterMedian,
optslowerNum,
optslowerMean,
optslowerMedian,
nCall,
nApplied,
if(!redType){nred}else{mred}
)
table
}
CoeffStrengthen <- read.csv("onlyCoeffStrengthen.csv", header = TRUE)
res <- analysis(rs,CoeffStrengthen,'CoeffStrengthen',0)
t<- t %>% bind_rows(res)
t
ColSingleton <- read.csv("onlyColSingleton.csv", header = TRUE)
res <- analysis(rs,ColSingleton,'ColSingleton',0)
t<- t %>% bind_rows(res)
t
default <- read.csv("default.csv", header = TRUE)
default <- default %>% filter(abs(totTime-0.0)>1e-6)
#default %>% filter(status=='*'&totTime>50) %>% View()
res <- analysis(rs,default,'default',0)
t<- t %>% bind_rows(res)
t
Doubletoneq <- read.csv("onlyDoubletoneq.csv", header = TRUE)
res <- analysis(rs,Doubletoneq,'Doubletoneq',0)
t<- t %>% bind_rows(res)
t
DualFix <- read.csv("onlyDualFix.csv", header = TRUE)
res <- analysis(rs,DualFix,'DualFix',0)
t<- t %>% bind_rows(res)
t
ParallelRow <- read.csv("onlyParallelRow.csv", header = TRUE)
res <- analysis(rs,ParallelRow,'ParallelRow',1)
t<- t %>% bind_rows(res)
t
Probing <- read.csv("onlyProbing.csv", header = TRUE)
res <- analysis(rs,Probing,'Probing',0)
t<- t %>% bind_rows(res)
t
Propagation <- read.csv("onlyPropagation.csv", header = TRUE)
res <- analysis(rs,Propagation,'Propagation',0)
t<- t %>% bind_rows(res)
t
PureLit <- read.csv("onlyPureLit.csv", header = TRUE)
res <- analysis(rs,PureLit,'PureLit',0)
t<- t %>% bind_rows(res)
t
SimpleProbing <- read.csv("onlySimpleProbing.csv", header = TRUE)
res <- analysis(rs,SimpleProbing,'SimpleProbing',0)
t<- t %>% bind_rows(res)
t
SimplifyIneq <- read.csv("onlySimplifyIneq.csv", header = TRUE)
res <- analysis(rs,SimplifyIneq,'SimplifyIneq',1)
t<- t %>% bind_rows(res)
t
Sparsify <- read.csv("onlySparsify.csv", header = TRUE)
res <- analysis(rs,Sparsify,'Sparsify',0)
t<- t %>% bind_rows(res)
t
Stuffing <- read.csv("onlyStuffing.csv", header = TRUE)
res <- analysis(rs,Stuffing,'Stuffing',0)
t<- t %>% bind_rows(res)
t
hbr <- read.csv("onlyhbr.csv", header = TRUE)
res <- analysis(rs,hbr,'HBR',1)
t<- t %>% bind_rows(res)
t
defaultPaPILO <- read.csv("offMIP.csv", header = TRUE)
res <- analysis(rs,defaultPaPILO,'defaultPaPILO',1)
t<- t %>% bind_rows(res)
t
all <- read.csv("all.csv", header = TRUE)
all <- all %>% filter(abs(totTime)>1e-6)
res <- analysis(rs,all,'all',1)
t<- t %>% bind_rows(res)
t
t<-t %>% arrange(desc(solvedIns)) %>% View()
write.csv(t,"dec.csv",row.names = TRUE)
View(t)
